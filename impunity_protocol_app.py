import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import random
import io

st.set_page_config(page_title="Impunity Protocol Engine", layout="wide")

# -------------------------------
# Sidebar - Patient Profile
# -------------------------------
st.sidebar.title("👤 Patient Profile")
patient = {
    "ID": "PATIENT_05",
    "Age": 67,
    "Diabetic": True,
    "Allergies": ["Penicillin"],
    "History": "Coma (3 days)"
}
for k, v in patient.items():
    st.sidebar.markdown(f"**{k}:** {v if not isinstance(v, list) else ', '.join(v)}")

st.sidebar.markdown("---")
st.sidebar.markdown("🔘 Click below to simulate a real ICU emergency case:")

# -------------------------------
# Simulate input vitals
# -------------------------------
def simulate_vitals(case_id):
    if case_id == 1:
        return {"HR": 82, "SpO2": 96, "Glucose": 61, "Movement": False}
    elif case_id == 2:
        return {"HR": 38, "SpO2": 80, "Glucose": 112, "Movement": False}
    elif case_id == 3:
        return {"HR": 75, "SpO2": 92, "Glucose": 105, "Movement": True}
    else:
        return {}

# -------------------------------
# Generate protocol per case
# -------------------------------
def generate_case_protocol(case_id, vitals):
    if case_id == 1:
        return {
            "title": "CASE 1: Insulin Deficiency",
            "explanation": "Detected low glucose in diabetic patient. Emergency insulin protocol triggered.",
            "topic": "/ICU/devices/patient_05/inject_insulin",
            "actions": [
                "💉 Auto-injection: 6 units insulin",
                "📝 Update EHR record",
                "📡 Notify remote staff"
            ],
            "critical": True
        }
    elif case_id == 2:
        return {
            "title": "CASE 2: Drug Not Available",
            "explanation": "Low HR + SpO₂ detected. Required drug unavailable. Auto-request sent to nearby hospitals.",
            "topic": "/ICU/med_alert/adrenaline_request",
            "actions": [
                "❗ Adrenaline unavailable locally",
                "📶 Broadcast to hospital network",
                "🚁 Drone delivery from Hospital_B",
                "📲 Notify ICU with ETA"
            ],
            "critical": True
        }
    elif case_id == 3:
        return {
            "title": "CASE 3: Patient Awakens",
            "explanation": "Detected movement in previously comatose patient. Awakening alert sent.",
            "topic": "/ICU/alerts/patient_awake",
            "actions": [
                "📈 Movement pattern matches awakening",
                "📬 ICU team alerted",
                "🧠 Neurological protocol initiated"
            ],
            "critical": True
        }
    else:
        return {
            "title": "Monitoring Mode",
            "explanation": "No emergencies detected. Monitoring ongoing.",
            "topic": "/ICU/monitoring/passive",
            "actions": ["🟢 No emergency", "📊 Passive monitoring"],
            "critical": False
        }

# -------------------------------
# Report export
# -------------------------------
def create_report(case_id, vitals, protocol):
    report = f"""🧾 ICU Emergency Protocol Report

Patient ID: {patient['ID']}
Age: {patient['Age']}
Case Title: {protocol['title']}

📊 Vitals:
- Heart Rate: {vitals['HR']} bpm
- SpO₂: {vitals['SpO2']}%
- Glucose: {vitals['Glucose']} mg/dL
- Movement Detected: {'Yes' if vitals['Movement'] else 'No'}

🧠 System Decision:
{protocol['explanation']}

📡 MQTT Topic Triggered:
{protocol['topic']}

✅ Actions Taken:
"""
    for action in protocol['actions']:
        report += f"- {action}\n"

    report += "\nReport generated by Impunity Protocol Simulation Engine."
    return report.encode("utf-8")

# -------------------------------
# Vitals Plotting
# -------------------------------
def plot_vitals(vitals):
    df = pd.DataFrame({
        "Time": [f"T-{i}" for i in range(9, -1, -1)],
        "Heart Rate": [random.randint(70, 100)] * 9 + [vitals["HR"]],
        "SpO₂": [random.randint(90, 99)] * 9 + [vitals["SpO2"]],
        "Glucose": [random.randint(80, 130)] * 9 + [vitals["Glucose"]],
    })

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df["Time"], y=df["Heart Rate"], name="Heart Rate", line=dict(color="red")))
    fig.add_trace(go.Scatter(x=df["Time"], y=df["SpO₂"], name="SpO₂", line=dict(color="blue")))
    fig.add_trace(go.Scatter(x=df["Time"], y=df["Glucose"], name="Glucose", line=dict(color="green")))
    fig.update_layout(template="plotly_white", height=400)
    return fig

# -------------------------------
# Main Dashboard Actions
# -------------------------------
col1, col2, col3 = st.columns(3)
selected_case = 0

if col1.button("🩺 Case 1: Insulin Deficiency"):
    selected_case = 1
elif col2.button("💊 Case 2: Drug Unavailable"):
    selected_case = 2
elif col3.button("🧠 Case 3: Patient Awakens"):
    selected_case = 3

# -------------------------------
# Display Section
# -------------------------------
if selected_case > 0:
    vitals = simulate_vitals(selected_case)
    protocol = generate_case_protocol(selected_case, vitals)

    st.header(protocol["title"])
    st.success(protocol["explanation"])
    st.markdown(f"**📡 MQTT Triggered Topic:** `{protocol['topic']}`")

    st.markdown("### ✅ Actions Taken")
    for a in protocol["actions"]:
        st.markdown(f"- {a}")

    st.markdown("### 📈 Vitals Chart")
    st.plotly_chart(plot_vitals(vitals), use_container_width=True)

    # 🔊 Play alarm if critical
    if protocol["critical"]:
        st.audio("https://assets.mixkit.co/sfx/preview/mixkit-classic-alarm-995.mp3")

    # 📄 Downloadable report
    st.download_button("📄 Download Case Report", data=create_report(selected_case, vitals, protocol),
                       file_name=f"{protocol['title'].replace(' ', '_')}.txt", mime="text/plain")

st.markdown("---")
st.caption("📡 Impunity Protocol Engine | Smart ICU Emergency System Simulation")
