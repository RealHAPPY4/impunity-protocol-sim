import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import random, io, csv, smtplib
from datetime import datetime
from email.mime.text import MIMEText
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# --- Translation dictionaries
translations = {
    "English": {
        "page_title": "ICU Futuristic MQTT Simulator",
        "interface_language": "ЁЯМР Interface Language",
        "select_patient": "ЁЯСд Select Patient",
        "patient_profile": "### Patient Profile",
        "edit_age": "Edit Age",
        "diabetic": "Diabetic",
        "allergies": "Allergies",
        "history": "History",
        "feedback": "ЁЯТм Feedback",
        "your_name": "Your Name",
        "your_email": "Your Email",
        "feedback_message": "Feedback Message",
        "submit": "Submit",
        "feedback_saved": "тЬЕ Feedback saved and emailed!",
        "feedback_not_sent": "тЭМ Feedback saved, but email not sent.",
        "choose_case": "ЁЯЪС Futuristic Emergency Simulator\nChoose a case:",
        "actions_taken": "### тЬЕ Actions Taken",
        "vitals_chart": "### ЁЯУИ Vitals Chart",
        "mqtt_flow": "### ЁЯФД MQTT Flow",
        "protocol_timeline": "### тП│ Protocol Timeline",
        "risk_prediction": "### ЁЯЪж Risk Prediction",
        "critical_event_probability": "Critical Event Probability",
        "message_log": "### ЁЯУЬ Message Log",
        "download_pdf": "ЁЯУД Download Case Report (PDF)",
        "download_csv": "ЁЯУе Download Session Log (CSV)",
        "mqtt_topic": "**ЁЯУб MQTT Topic:**",
        "broker_status": "ЁЯМР MQTT Broker Status",
        "latency": "Latency: 100 ms",
        "cluster_mode": "Cluster Mode: Active",
        "throughput": "Throughput: 500 msg/sec",
        "qos": "QoS Level: 2",
        "online_devices": "Device Online: 24",
        "session_expiry": "Session Expiry: 10 min",
        "app_caption": "ЁЯУб Futuristic MQTT Brokerage | Smart ICU Simulation | AI & Animated Protocols | Augmented Graphical Engine",
    },
    "рд╣рд┐рдиреНрджреА": {
        "page_title": "рдЖрдИрд╕реАрдпреВ рдлреНрдпреВрдЪрд░рд┐рд╕реНрдЯрд┐рдХ MQTT рд╕рд┐рдореНрдпреБрд▓реЗрдЯрд░",
        "interface_language": "ЁЯМР рдЗрдВрдЯрд░рдлрд╝реЗрд╕ рднрд╛рд╖рд╛",
        "select_patient": "ЁЯСд рдорд░реАрдЬ рдЪреБрдиреЗрдВ",
        "patient_profile": "### рдорд░реАрдЬ рдкреНрд░реЛрдлрд╛рдЗрд▓",
        "edit_age": "рдЖрдпреБ рдмрджрд▓реЗрдВ",
        "diabetic": "рдордзреБрдореЗрд╣реА",
        "allergies": "рдПрд▓рд░реНрдЬреА",
        "history": "рдЗрддрд┐рд╣рд╛рд╕",
        "feedback": "ЁЯТм рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛",
        "your_name": "рдЖрдкрдХрд╛ рдирд╛рдо",
        "your_email": "рдЖрдкрдХрд╛ рдИрдореЗрд▓",
        "feedback_message": "рд╕рдВрджреЗрд╢",
        "submit": "рдЬрдорд╛ рдХрд░реЗрдВ",
        "feedback_saved": "тЬЕ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕рд╣реЗрдЬ рд▓реА рдЧрдИ рдФрд░ рдИрдореЗрд▓ рдХрд░ рджреА рдЧрдИ!",
        "feedback_not_sent": "тЭМ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕рд╣реЗрдЬ рд▓реА рдЧрдИ, рд▓реЗрдХрд┐рди рдИрдореЗрд▓ рднреЗрдЬреА рдирд╣реАрдВ рдЧрдИред",
        "choose_case": "ЁЯЪС рдлреНрдпреВрдЪрд░рд┐рд╕реНрдЯрд┐рдХ рдЗрдорд░рдЬреЗрдВрд╕реА рд╕рд┐рдореНрдпреБрд▓реЗрдЯрд░\nрдПрдХ рдХреЗрд╕ рдЪреБрдиреЗрдВ:",
        "actions_taken": "### тЬЕ рд▓рд┐рдП рдЧрдП рдХрд╛рд░реНрдп",
        "vitals_chart": "### ЁЯУИ рдЬреАрд╡рди рд╕рдВрдХреЗрдд рдЪрд╛рд░реНрдЯ",
        "mqtt_flow": "### ЁЯФД MQTT рдкреНрд░рд╡рд╛рд╣",
        "protocol_timeline": "### тП│ рдкреНрд░реЛрдЯреЛрдХреЙрд▓ рдЯрд╛рдЗрдорд▓рд╛рдЗрди",
        "risk_prediction": "### ЁЯЪж рдЬреЛрдЦрд┐рдо рдЕрдиреБрдорд╛рди",
        "critical_event_probability": "рдЧрдВрднреАрд░ рдШрдЯрдирд╛ рдХреА рд╕рдВрднрд╛рд╡рдирд╛",
        "message_log": "### ЁЯУЬ рд╕рдВрджреЗрд╢ рд▓реЙрдЧ",
        "download_pdf": "ЁЯУД рдХреЗрд╕ рд░рд┐рдкреЛрд░реНрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ (PDF)",
        "download_csv": "ЁЯУе рд╕рддреНрд░ рд▓реЙрдЧ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ (CSV)",
        "mqtt_topic": "**ЁЯУб MQTT рд╡рд┐рд╖рдп:**",
        "broker_status": "ЁЯМР MQTT рджрд▓рд╛рд▓ рд╕реНрдерд┐рддрд┐",
        "latency": "рд▓реЗрдЯреЗрдВрд╕реА: 100 рдорд┐.рд╕реЗ.",
        "cluster_mode": "рдХреНрд▓рд╕реНрдЯрд░ рдореЛрдб: рд╕рдХреНрд░рд┐рдп",
        "throughput": "рдереНрд░реВрдкреБрдЯ: 500 рд╕рдВрджреЗрд╢/рд╕реЗрдХрдВрдб",
        "qos": "QoS рд╕реНрддрд░: 2",
        "online_devices": "рдСрдирд▓рд╛рдЗрди рдбрд┐рд╡рд╛рдЗрд╕: 24",
        "session_expiry": "рд╕рддреНрд░ рд╕рдорд╛рдкреНрддрд┐: 10 рдорд┐рдирдЯ",
        "app_caption": "ЁЯУб рдлреНрдпреВрдЪрд░рд┐рд╕реНрдЯрд┐рдХ MQTT рджрд▓рд╛рд▓реА | рд╕реНрдорд╛рд░реНрдЯ ICU рд╕рд┐рдореНрдпреБрд▓реЗрд╢рди | рдПрдЖрдИ рдФрд░ рдПрдирд┐рдореЗрдЯреЗрдб рдкреНрд░реЛрдЯреЛрдХреЙрд▓ | рд╕рдВрд╡рд░реНрдзрд┐рдд рдЧреНрд░рд╛рдлрд┐рдХрд▓ рдЗрдВрдЬрди",
    },
}

# --- Styles
st.set_page_config(layout="wide", initial_sidebar_state="expanded")

st.markdown("""
<style>
.glass-card {
    background: rgba(255, 255, 255, 0.22);
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    backdrop-filter: blur(12px);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.18);
    padding: 18px 20px;
    margin-top: 12px;
    margin-bottom: 12px;
}
.metric-badge {
    border-radius: 10px;
    padding: 5px 15px;
    font-size: 18px;
}
.metric-green {
    background:#c8ffc8;
}
.metric-yellow {
    background:#ffffc8;
}
.metric-red {
    background:#ffc8c8;
}
</style>
""", unsafe_allow_html=True)

# Language selector
current_lang = st.sidebar.selectbox(
    "ЁЯМР Interface Language",
    list(translations.keys()),
    key="lang_select"
)
t = translations[current_lang]

st.title(t["page_title"])

# Patient profiles without avatars
patients = {
    "PATIENT_05": {"Age": 67, "Diabetic": True, "Allergies": ["Penicillin"], "History": "Coma (3 days)"},
    "PATIENT_12": {"Age": 54, "Diabetic": False, "Allergies": [], "History": "Hypertension"},
    "PATIENT_21": {"Age": 73, "Diabetic": True, "Allergies": ["Sulfa"], "History": "Post-surgery"},
}

selected_patient = st.sidebar.selectbox(t["select_patient"], list(patients.keys()))
new_age = st.sidebar.number_input(t["edit_age"], min_value=1, max_value=120, value=patients[selected_patient]["Age"])
patients[selected_patient]["Age"] = new_age
patient = patients[selected_patient]

# Show patient profile text only
st.sidebar.markdown(f"""
<div class="glass-card">
<b>Patient ID:</b> {selected_patient}<br>
<b>{t['edit_age']}:</b> {patient['Age']}<br>
<b>{t['diabetic']}:</b> {"Yes" if patient['Diabetic'] else "No"}<br>
<b>{t['allergies']}:</b> {', '.join(patient['Allergies']) if patient['Allergies'] else 'None'}<br>
<b>{t['history']}:</b> {patient['History']}
</div>
""", unsafe_allow_html=True)

# Feedback email function
def send_feedback_email(name, email, message):
    subject = "ICU Simulator Feedback Received"
    body = f"Name: {name}\nEmail: {email}\nMessage: {message}"
    sender = "your_email@gmail.com"          # Replace with your Gmail address
    recipient = "sapban92@gmai.com"
    password = "your_app_password_here"      # Replace with your Gmail app password

    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = recipient

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender, password)
        server.sendmail(sender, recipient, msg.as_string())
        server.quit()
        return True
    except Exception as e:
        st.sidebar.error(f"Email send error: {e}")
        return False

# Feedback form
with st.sidebar.form("feedback_form"):
    st.subheader(t["feedback"])
    name = st.text_input(t["your_name"])
    email = st.text_input(t["your_email"])
    message = st.text_area(t["feedback_message"])
    submitted = st.form_submit_button(t["submit"])
    if submitted:
        with open("feedback_log.csv", "a", newline="") as f:
            writer = csv.writer(f)
            writer.writerow([name, email, message, datetime.now().isoformat()])
        sent = send_feedback_email(name, email, message)
        if sent:
            st.sidebar.success(t["feedback_saved"])
        else:
            st.sidebar.error(t["feedback_not_sent"])

# Rest of the functions and main interface remain the same...
# (Keep functions: predict_risk, simulate_vitals, generate_case_protocol, plot_vitals, mqtt_stats_panel, mqtt_flow_diagram, protocol_timeline, generate_pdf_report)
# And the main interface logic as before, just without any avatar code.

# For brevity, please use your existing function implementations unchanged from before.

# Main interface code with UI and charts goes here...

# Call your existing main interface code below to complete the app.

